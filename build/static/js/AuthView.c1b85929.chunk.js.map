{"version":3,"sources":["components/AuthForm/AuthForm.module.css","views/AuthView/AuthView.module.css","assets/icons/google-logo.png","components/AuthForm/AuthForm.js","views/AuthView/AuthView.js"],"names":["module","exports","AuthForm","dispatch","useDispatch","useState","checkForm","setCheckForm","validationSchema","yup","email","required","password","min","formik","useFormik","initialValues","onSubmit","values","authOperations","logIn","register","handleSelectFrom","e","dataset","target","login","document","getElementById","style","backgroundColor","form","handleSubmit","TextField","fullWidth","id","name","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","className","s","TextField__formik","Button","btn__formik","color","variant","type","forma__wrapper","para","btnWrapper","href","gBtn","gLogo","src","gIcon","alt","form__btn__container","form__btn__container__btn","onClick","data-login","data-register","AuthView","wrapper","innerWrapper","header"],"mappings":"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","file":"static/js/AuthView.c1b85929.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"forma__wrapper\":\"AuthForm_forma__wrapper__10HeL\",\"btn__formik\":\"AuthForm_btn__formik__3q8w_\",\"TextField__formik\":\"AuthForm_TextField__formik__1KuCO\",\"form__btn__container\":\"AuthForm_form__btn__container__kBEaP\",\"form__btn__container__btn\":\"AuthForm_form__btn__container__btn__1YnW8\",\"btn__active\":\"AuthForm_btn__active__1QAJT\",\"para\":\"AuthForm_para__2TbQh\",\"secondPara\":\"AuthForm_secondPara__1HXCW\",\"gBtn\":\"AuthForm_gBtn__U2r2B\",\"btnWrapper\":\"AuthForm_btnWrapper__3G2Fr\",\"btnWrapperBottom\":\"AuthForm_btnWrapperBottom__9LTqa\",\"gLogo\":\"AuthForm_gLogo__2p7mL\",\"input\":\"AuthForm_input__25_rD\",\"regBtn\":\"AuthForm_regBtn__3IY_s\",\"innerForm\":\"AuthForm_innerForm__3_B_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AuthView_wrapper__3VBDi\",\"innerWrapper\":\"AuthView_innerWrapper__5c4rf\",\"header\":\"AuthView_header__ynK-y\",\"para\":\"AuthView_para__3PPjV\"};","export default __webpack_public_path__ + \"static/media/google-logo.4088374a.png\";","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport { authOperations } from '../../redux/auth';\nimport s from './AuthForm.module.css';\nimport gIcon from '../../assets/icons/google-logo.png';\n\nexport default function AuthForm() {\n  const dispatch = useDispatch();\n  const [checkForm, setCheckForm] = useState('');\n\n  const validationSchema = yup.object({\n    email: yup.string().email().required('Email is required'),\n    password: yup\n      .string('Enter your password')\n      .min(8, 'At least 8 characters')\n      .required('Password is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: ({ email, password }) => {\n      formik.values.email = '';\n      formik.values.password = '';\n      if (checkForm === 'login') {\n        dispatch(authOperations.logIn({ email, password }));\n      }\n      if (checkForm === 'register') {\n        dispatch(authOperations.register({ email, password }));\n      }\n    },\n  });\n  const handleSelectFrom = e => {\n    const {\n      target: { dataset },\n    } = e;\n    if (dataset.login === 'login') {\n      setCheckForm('login');\n      document.getElementById('btn-register').style.backgroundColor =\n        ' #c2c1c1';\n      document.getElementById('btn-login').style.backgroundColor =\n        'rgb(241, 114, 10)';\n    }\n    if (dataset.register === 'register') {\n      setCheckForm('register');\n      document.getElementById('btn-register').style.backgroundColor =\n        'rgb(241, 114, 10)';\n      document.getElementById('btn-login').style.backgroundColor = ' #c2c1c1';\n    }\n  };\n  const form = (\n    <form onSubmit={formik.handleSubmit}>\n      <TextField\n        fullWidth\n        id=\"email\"\n        name=\"email\"\n        label=\"Email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <TextField\n        fullWidth\n        className={s.TextField__formik}\n        id=\"password\"\n        name=\"password\"\n        label=\"Password*\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      <Button\n        className={s.btn__formik}\n        color=\"primary\"\n        variant=\"contained\"\n        fullWidth\n        type=\"submit\"\n      >\n        Submit\n      </Button>\n    </form>\n  );\n\n  return (\n    <div className={s.forma__wrapper}>\n      <p className={s.para}>\n        You can use google registration and login even you have created an\n        account by simple way!\n      </p>\n      <div className={s.btnWrapper}>\n        <a href=\"https://final-group-project-node.herokuapp.com/auth/google\">\n          <button className={s.gBtn} type=\"submit\">\n            Google\n          </button>\n        </a>\n        <img className={s.gLogo} src={gIcon} alt={'gIcon'} />\n      </div>\n      <div className={s.form__btn__container}>\n        <button\n          id=\"btn-login\"\n          className={s.form__btn__container__btn}\n          onClick={handleSelectFrom}\n          data-login=\"login\"\n          type=\"click\"\n        >\n          Login\n        </button>\n        <button\n          id=\"btn-register\"\n          className={s.form__btn__container__btn}\n          onClick={handleSelectFrom}\n          data-register=\"register\"\n          type=\"click\"\n        >\n          Register\n        </button>\n      </div>\n      {checkForm === 'login' && form}\n      {checkForm === 'register' && form}\n    </div>\n  );\n}\n","import AuthForm from '../../components/AuthForm';\n// import Modal from '../../components/Modal';\nimport s from './AuthView.module.css';\n\nconst AuthView = () => {\n  return (\n    <div className={s.wrapper}>\n      <div className={s.innerWrapper}>\n        <h1 className={s.header}>Pro Test</h1>\n        <p className={s.para}>\n          <span>[</span> We will help you find weak points in knowledge so that\n          you can strengthen it. We will show you what is relevant to know for a{' '}\n          <span>QA Engineer</span> and will try to make the learning process\n          more diverse_ <span>]</span>\n        </p>\n      </div>\n      <AuthForm />\n    </div>\n  );\n};\n\nexport default AuthView;\n"],"sourceRoot":""}