{"version":3,"sources":["components/Auth/Auth.module.css","views/AuthView/AuthView.module.css","assets/icons/google-logo.png","components/Auth/Auth.js","views/AuthView/AuthView.js"],"names":["module","exports","Auth","dispatch","useDispatch","useState","check","setCheck","validationSchema","yup","email","required","password","min","formik","useFormik","initialValues","onSubmit","resetForm","authOperations","logIn","register","handleSelectFrom","e","dataset","target","btnReg","document","getElementById","btnLog","login","style","backgroundColor","Form","className","s","auth_form","handleSubmit","TextField","fullWidth","type","id","name","label","value","values","onChange","handleChange","error","touched","Boolean","errors","helperText","onClick","el","auth_form_btn","Button","color","variant","auth_wrapper","auth_warnTitle","auth_google","href","auth_google_btn","auth_google_img","src","googleIcon","alt","auth_btnContainer","auth_btnContainer_btn","data-login","data-register","AuthView","authView_wrapper","authView_description","authView_description_title","authView_description_help"],"mappings":"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","file":"static/js/AuthView.5fc9bdf5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth_wrapper\":\"Auth_auth_wrapper__2MIXN\",\"auth_warnTitle\":\"Auth_auth_warnTitle__3ceme\",\"auth_google\":\"Auth_auth_google__PTh5m\",\"auth_google_btn\":\"Auth_auth_google_btn__QGGjy\",\"auth_google_img\":\"Auth_auth_google_img__kvALR\",\"auth_btnContainer\":\"Auth_auth_btnContainer__3RtpO\",\"auth_btnContainer_btn\":\"Auth_auth_btnContainer_btn__hQvq6\",\"auth_form\":\"Auth_auth_form__32q2R\",\"auth_form_textField\":\"Auth_auth_form_textField__2EG9k\",\"auth_form_btn\":\"Auth_auth_form_btn__39Xtb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authView_wrapper\":\"AuthView_authView_wrapper__1Cq2y\",\"authView_description\":\"AuthView_authView_description__2bRPq\",\"authView_description_title\":\"AuthView_authView_description_title__3j2bW\",\"authView_description_help\":\"AuthView_authView_description_help__ifiGG\"};","export default __webpack_public_path__ + \"static/media/google-logo.4088374a.png\";","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport { authOperations } from '../../redux/auth';\nimport s from './Auth.module.css';\nimport googleIcon from '../../assets/icons/google-logo.png';\n\nexport default function Auth() {\n  const dispatch = useDispatch();\n  const [check, setCheck] = useState('');\n\n  const validationSchema = yup.object({\n    email: yup.string().email().required('Email is required'),\n    password: yup\n      .string('Enter your password')\n      .min(8, 'At least 8 characters')\n      .required('Password is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: ({ email, password }, { resetForm }) => {\n      if (check === 'login')\n        dispatch(authOperations.logIn({ email, password }));\n      if (check === 'register')\n        dispatch(authOperations.register({ email, password }));\n      return resetForm();\n    },\n  });\n  const handleSelectFrom = e => {\n    const {\n      target: { dataset },\n    } = e;\n    const btnReg = document.getElementById('btn-register');\n    const btnLog = document.getElementById('btn-login');\n    if (dataset.login === 'login') {\n      setCheck('login');\n      btnReg.style.backgroundColor = ' #c2c1c1';\n      btnLog.style.backgroundColor = 'rgb(241, 114, 10)';\n    }\n    if (dataset.register === 'register') {\n      setCheck('register');\n      btnReg.style.backgroundColor = 'rgb(241, 114, 10)';\n      btnLog.style.backgroundColor = ' #c2c1c1';\n    }\n  };\n\n  const togglePassword = () => {\n    let el = document.getElementById('password');\n    if (el.type === 'password') {\n      el.type = 'text';\n    } else {\n      el.type = 'password';\n    }\n  };\n\n  const Form = (\n    <form className={s.auth_form} onSubmit={formik.handleSubmit}>\n      <TextField\n        fullWidth\n        type=\"email\"\n        id=\"email\"\n        name=\"email\"\n        label=\"Email\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <div>\n        <TextField\n          fullWidth\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          label=\"Password*\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n        <input type=\"checkbox\" onClick={togglePassword} />\n        Show password*\n      </div>\n      <div className={s.auth_form_btn}>\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Submit\n        </Button>\n      </div>\n    </form>\n  );\n\n  return (\n    <div className={s.auth_wrapper}>\n      <p className={s.auth_warnTitle}>\n        You can use google registration and login even you have created an\n        account by simple way!\n      </p>\n      <div className={s.auth_google}>\n        <a href=\"https://final-group-project-node.herokuapp.com/auth/google\">\n          <button className={s.auth_google_btn} type=\"submit\">\n            Google\n          </button>\n        </a>\n        <img className={s.auth_google_img} src={googleIcon} alt={'gIcon'} />\n      </div>\n      <div className={s.auth_btnContainer}>\n        <button\n          id=\"btn-login\"\n          className={s.auth_btnContainer_btn}\n          onClick={handleSelectFrom}\n          data-login=\"login\"\n          type=\"click\"\n        >\n          Login\n        </button>\n        <button\n          id=\"btn-register\"\n          className={s.auth_btnContainer_btn}\n          onClick={handleSelectFrom}\n          data-register=\"register\"\n          type=\"click\"\n        >\n          Register\n        </button>\n      </div>\n      {check === 'login' && Form}\n      {check === 'register' && Form}\n    </div>\n  );\n}\n","import Auth from '../../components/Auth';\nimport s from './AuthView.module.css';\n\nconst AuthView = () => {\n  return (\n    <div className={s.authView_wrapper}>\n      <div className={s.authView_description}>\n        <h1 className={s.authView_description_title}>Pro Test</h1>\n        <p className={s.authView_description_help}>\n          <span>[</span> We will help you find weak points in knowledge so that\n          you can strengthen it. We will show you what is relevant to know for a{' '}\n          <span>QA Engineer</span> and will try to make the learning process\n          more diverse_ <span>]</span>\n        </p>\n      </div>\n      <Auth />\n    </div>\n  );\n};\n\nexport default AuthView;\n"],"sourceRoot":""}